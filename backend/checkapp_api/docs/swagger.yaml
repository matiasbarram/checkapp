basePath: /api/v1
definitions:
  models.Attendance:
    properties:
      comments:
        type: string
      confirmed:
        type: boolean
      event_time:
        type: string
      event_type:
        type: string
      id:
        type: integer
      location:
        type: string
      user_id:
        type: integer
    type: object
  models.AttendanceParams:
    properties:
      comments:
        type: string
      company_id:
        type: integer
      device_secret_key:
        type: string
      event_type:
        type: string
      location:
        type: string
      user_id:
        type: integer
    required:
    - company_id
    - user_id
    type: object
  models.Qr:
    properties:
      company_id:
        type: integer
      content:
        items:
          type: integer
        type: array
      id:
        type: integer
    type: object
  models.SimpleError:
    properties:
      error:
        type: string
    type: object
  models.User:
    properties:
      company_id:
        type: integer
      device_id:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
      rut:
        type: string
    required:
    - company_id
    - email
    - name
    - password
    - role
    - rut
    type: object
  models.UserCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserLoginResponse:
    properties:
      id:
        $ref: '#/definitions/models.User'
      message:
        type: string
    type: object
host: api.asiendosoftware.xyz
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a server for gente xora
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: CheckApp Server API
paths:
  /:
    get:
      description: show api homepage
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: api homepage
      tags:
      - home
  /login:
    post:
      consumes:
      - application/json
      description: lol
      parameters:
      - description: user credentials (email and password)
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SimpleError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SimpleError'
      summary: basic login
      tags:
      - /login
  /private/attendance:
    post:
      consumes:
      - application/json
      description: lol
      parameters:
      - description: The input Attendance struct
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.AttendanceParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Attendance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SimpleError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SimpleError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SimpleError'
      summary: registers attendance for current user
      tags:
      - /private/attendance
  /private/attendance/last:
    get:
      description: show api homepage
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Attendance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SimpleError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SimpleError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SimpleError'
      summary: returns current user's last attendance event
      tags:
      - /private/attendance/last
  /qrs:
    get:
      consumes:
      - application/json
      description: lol
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Qr'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SimpleError'
      summary: retrieves all qrs (pagination pending)
      tags:
      - /qrs
  /qrs/{id}:
    get:
      description: lol
      parameters:
      - description: int valid
        in: path
        minimum: 1
        name: int
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Qr'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SimpleError'
      summary: retrieves qr by id
      tags:
      - /qrs/{id}
  /users:
    get:
      consumes:
      - application/json
      description: lol
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SimpleError'
      summary: retrieves all users (pagination pending)
      tags:
      - /users
    post:
      consumes:
      - application/json
      description: lol
      parameters:
      - description: The input User struct
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SimpleError'
      summary: creates a new user
      tags:
      - /users
  /users/{id}:
    get:
      description: lol
      parameters:
      - description: int valid
        in: path
        minimum: 1
        name: int
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SimpleError'
      summary: retrieves user by id
      tags:
      - /users/{id}
schemes:
- http
- https
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
